# Workflow name
name: Build & Deploy NixOS

# Concurrency control to prevent parallel runs
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Trigger conditions
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

# Security permissions
permissions:
  contents: read

jobs:
  # Basic build verification job
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build check
        run: echo "Build check passed"

      - name: Generate CI Badges
        uses: gaelgirodon/ci-badges-action@v1
        with:
          gist-id: ${{ secrets.GIST_ID }}
          token: ${{ secrets.GIST_TOKEN }}

  # Deployment job - only runs on main branch
  deploy:
    timeout-minutes: 15
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    env:
      TAILSCALE_API_URL: "https://api.tailscale.com/api/v2"
    steps:
      # Checkout repository
      - uses: actions/checkout@v4

      # Setup QEMU for ARM64 support
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      # Install and configure Nix
      - name: Install Nix
        uses: cachix/install-nix-action@v25
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: |
            experimental-features = nix-command flakes
            extra-platforms = aarch64-linux
            trusted-users = root runner

      # Setup Tailscale connection
      - name: Connect to Tailscale
        uses: tailscale/github-action@v3
        with:
          oauth-client-id: ${{ secrets.TAILSCALE_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TAILSCALE_OAUTH_CLIENT_SECRET }}
          tags: tag:ci

      # Update Tailscale ACLs
      - name: Update Tailscale ACLs
        uses: tailscale/gitops-acl-action@v1
        with:
          oauth-client-id: ${{ secrets.TAILSCALE_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TAILSCALE_OAUTH_CLIENT_SECRET }}
          tailnet: ${{ secrets.TAILSCALE_TAILNET }}
          action: apply
          policy-file: policy.hujson

      - name: Get Device Information
        id: device-info
        run: |
          TOKEN_RESPONSE=$(curl -s -d "client_id=${{ secrets.TAILSCALE_OAUTH_CLIENT_ID }}" \
                             -d "client_secret=${{ secrets.TAILSCALE_OAUTH_CLIENT_SECRET }}" \
                             "$TAILSCALE_API_URL/oauth/token")
          
          if ! echo "$TOKEN_RESPONSE" | jq empty; then
            echo "Invalid JSON response from token endpoint"
            echo "Response: $TOKEN_RESPONSE"
            exit 1
          fi

          ACCESS_TOKEN=$(echo "$TOKEN_RESPONSE" | jq -r .access_token)

          if [ -z "$ACCESS_TOKEN" ]; then
            echo "Failed to obtain access token"
            echo "Response: $TOKEN_RESPONSE"
            exit 1
          fi

          DEVICES_RESPONSE=$(curl -s -f -H "Authorization: Bearer ${ACCESS_TOKEN}" \
            "$TAILSCALE_API_URL/tailnet/-/devices")
          
          if [ $? -ne 0 ]; then
            echo "Failed to fetch devices"
            echo "Response: $DEVICES_RESPONSE"
            exit 1
          fi

          if ! echo "$DEVICES_RESPONSE" | jq empty; then
            echo "Invalid JSON received from devices endpoint"
            echo "Response: $DEVICES_RESPONSE"
            exit 1
          fi

          DEVICE_INFO=$(echo "$DEVICES_RESPONSE" | \
            jq -c '.devices[] | select(.hostname=="ethernix") | {name: .name, lastSeen: .lastSeen, id: .id, tags: .tags}')

          if [ -z "$DEVICE_INFO" ]; then
            echo "Error: Device 'ethernix' not found"
            exit 1
          fi

          echo "name=$(echo "$DEVICE_INFO" | jq -r .name)" >> $GITHUB_OUTPUT
          echo "last_seen=$(echo "$DEVICE_INFO" | jq -r .lastSeen)" >> $GITHUB_OUTPUT
          echo "device_id=$(echo "$DEVICE_INFO" | jq -r .id)" >> $GITHUB_OUTPUT
          echo "has_ci_tag=$(echo "$DEVICE_INFO" | jq -r '.tags | contains(["tag:ci"])')" >> $GITHUB_OUTPUT

      - name: Check Device Online Status
        id: device-status
        run: |
          LAST_SEEN_TS=$(date -d "${{ steps.device-info.outputs.last_seen }}" +%s)
          CURRENT_TS=$(date +%s)
          DIFF=$((CURRENT_TS - LAST_SEEN_TS))
          
          if [ $DIFF -le 300 ]; then
            echo "online=true" >> $GITHUB_OUTPUT
          else
            echo "online=false" >> $GITHUB_OUTPUT
            echo "Skipping deployment: Target device was last seen $DIFF seconds ago (at: ${{ steps.device-info.outputs.last_seen }})"
          fi

      - name: Add CI Tag if not present
        if: steps.device-info.outputs.has_ci_tag == 'false'
        env:
          DEVICE_ID: ${{ steps.device-info.outputs.device_id }}
        run: |
          TOKEN_RESPONSE=$(curl -s -d "client_id=${{ secrets.TAILSCALE_OAUTH_CLIENT_ID }}" \
                             -d "client_secret=${{ secrets.TAILSCALE_OAUTH_CLIENT_SECRET }}" \
                             "$TAILSCALE_API_URL/oauth/token")
          
          if ! echo "$TOKEN_RESPONSE" | jq empty; then
            echo "Invalid JSON response from token endpoint"
            echo "Response: $TOKEN_RESPONSE"
            exit 1
          fi

          ACCESS_TOKEN=$(echo "$TOKEN_RESPONSE" | jq -r .access_token)

          if [ -z "$ACCESS_TOKEN" ]; then
            echo "Failed to obtain access token"
            echo "Response: $TOKEN_RESPONSE"
            exit 1
          fi

          UPDATE_RESPONSE=$(curl -s -f -X POST \
            -H "Authorization: Bearer ${ACCESS_TOKEN}" \
            -H "Content-Type: application/json" \
            -d '["tag:ci"]' \
            "$TAILSCALE_API_URL/device/${DEVICE_ID}/tags")
          
          if [ $? -ne 0 ]; then
            echo "Failed to update device tags"
            echo "Response: $UPDATE_RESPONSE"
            exit 1
          fi

      - name: Deploy NixOS Configuration
        if: steps.device-status.outputs.online == 'true'
        env:
          TARGET_HOST: ${{ steps.device-info.outputs.name }}
        run: |
          for i in {1..3}; do
            if nix run nixpkgs#nixos-rebuild -- switch \
              --flake .#ethernix \
              --target-host "$TARGET_HOST" \
              --use-remote-sudo \
              --impure \
              --option extra-platforms aarch64-linux \
              --option system-features kvm \
              --show-trace; then
              exit 0
            fi
            echo "Attempt $i failed, retrying..."
            sleep 10
          done
          exit 1

      - name: Update Deployment Badge
        if: always()
        uses: gaelgirodon/ci-badges-action@v1
        with:
          gist-id: ${{ secrets.GIST_ID }}
          token: ${{ secrets.GIST_TOKEN }}
          prefix: ethernix-deployment