name: Build & Deploy NixOS

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Maximize build space
        uses: AdityaGarg8/remove-unwanted-software@v4
        with:
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'
          remove-docker-images: 'true'
          remove-large-packages: 'true'
          remove-cached-tools: 'true'

      - uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Install Nix
        uses: cachix/install-nix-action@v25
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: |
            experimental-features = nix-command flakes
            extra-platforms = aarch64-linux
            trusted-users = root runner

      - name: Setup Cachix
        uses: cachix/cachix-action@v15
        with:
          name: ethernix
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'

      - name: Build
        run: |
          nix build .#nixosConfigurations.ethernix.config.system.build.toplevel \
            --impure \
            --option sandbox false \
            --option extra-platforms aarch64-linux \
            --option system-features kvm

      - name: Push to Cachix
        run: |
          cachix push ethernix ./result

  deploy:
    needs: build
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    env:
      TAILSCALE_API_URL: "https://api.tailscale.com/api/v2"
    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Install Nix
        uses: cachix/install-nix-action@v25
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: |
            experimental-features = nix-command flakes
            extra-platforms = aarch64-linux
            trusted-users = root runner

      - name: Connect to Tailscale
        uses: tailscale/github-action@v3
        with:
          oauth-client-id: ${{ secrets.TAILSCALE_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TAILSCALE_OAUTH_CLIENT_SECRET }}
          tags: tag:ci

      - name: Configure Temporary SSH Access
        run: |
          TOKEN_RESPONSE=$(curl -s -d "client_id=${{ secrets.TAILSCALE_OAUTH_CLIENT_ID }}" \
                             -d "client_secret=${{ secrets.TAILSCALE_OAUTH_CLIENT_SECRET }}" \
                             "$TAILSCALE_API_URL/oauth/token")
          
          if ! echo "$TOKEN_RESPONSE" | jq empty; then
            echo "Invalid JSON response from token endpoint"
            echo "Response: $TOKEN_RESPONSE"
            exit 1
          fi

          ACCESS_TOKEN=$(echo "$TOKEN_RESPONSE" | jq -r .access_token)

          if [ -z "$ACCESS_TOKEN" ]; then
            echo "Failed to obtain access token"
            echo "Response: $TOKEN_RESPONSE"
            exit 1
          fi

          # Get current ACL and strip comments before processing
          ACL_RESPONSE=$(curl -s -f -H "Authorization: Bearer ${ACCESS_TOKEN}" \
            "$TAILSCALE_API_URL/tailnet/-/acl" | \
            sed -e 's|//.*$||g' -e '/^\s*$/d' | \
            tr -d '\n' | \
            sed -e 's/,\s*}/}/g' -e 's/,\s*\]/]/g')
          
          if [ $? -ne 0 ]; then
            echo "Failed to fetch ACL"
            echo "Response: $ACL_RESPONSE"
            exit 1
          fi

          if ! echo "$ACL_RESPONSE" | jq empty; then
            echo "Invalid JSON received from ACL endpoint"
            echo "Response: $ACL_RESPONSE"
            exit 1
          fi

          # Process ACL updates with error checking
          CLEANED_ACL=$(echo "$ACL_RESPONSE" | jq -c 'del(.ssh[] | select(.src == ["tag:ci"] and .dst == ["tag:ci"]))' || exit 1)
          
          if [ -z "$CLEANED_ACL" ]; then
            echo "Failed to clean ACL"
            exit 1
          fi

          NEW_ACL=$(echo "$CLEANED_ACL" | jq -c '.ssh += [{
            "action": "accept",
            "src": ["tag:ci"],
            "dst": ["tag:ci"],
            "users": ["runner"]
          }]' || exit 1)

          if [ -z "$NEW_ACL" ]; then
            echo "Failed to create new ACL"
            exit 1
          fi

          # Update ACL with error checking
          UPDATE_RESPONSE=$(curl -s -f -X POST \
            -H "Authorization: Bearer ${ACCESS_TOKEN}" \
            -H "Content-Type: application/json" \
            -d "$NEW_ACL" \
            "$TAILSCALE_API_URL/tailnet/-/acl")
          
          if [ $? -ne 0 ]; then
            echo "Failed to update ACL"
            echo "Response: $UPDATE_RESPONSE"
            exit 1
          fi

      - name: Get Device Information
        id: device-info
        run: |
          TOKEN_RESPONSE=$(curl -s -d "client_id=${{ secrets.TAILSCALE_OAUTH_CLIENT_ID }}" \
                             -d "client_secret=${{ secrets.TAILSCALE_OAUTH_CLIENT_SECRET }}" \
                             "$TAILSCALE_API_URL/oauth/token")
          
          if ! echo "$TOKEN_RESPONSE" | jq empty; then
            echo "Invalid JSON response from token endpoint"
            echo "Response: $TOKEN_RESPONSE"
            exit 1
          fi

          ACCESS_TOKEN=$(echo "$TOKEN_RESPONSE" | jq -r .access_token)

          if [ -z "$ACCESS_TOKEN" ]; then
            echo "Failed to obtain access token"
            echo "Response: $TOKEN_RESPONSE"
            exit 1
          fi

          DEVICES_RESPONSE=$(curl -s -f -H "Authorization: Bearer ${ACCESS_TOKEN}" \
            "$TAILSCALE_API_URL/tailnet/-/devices")
          
          if [ $? -ne 0 ]; then
            echo "Failed to fetch devices"
            echo "Response: $DEVICES_RESPONSE"
            exit 1
          fi

          if ! echo "$DEVICES_RESPONSE" | jq empty; then
            echo "Invalid JSON received from devices endpoint"
            echo "Response: $DEVICES_RESPONSE"
            exit 1
          fi

          DEVICE_INFO=$(echo "$DEVICES_RESPONSE" | \
            jq -c '.devices[] | select(.hostname=="ethernix") | {name: .name, lastSeen: .lastSeen, id: .id, tags: .tags}')

          if [ -z "$DEVICE_INFO" ]; then
            echo "Error: Device 'ethernix' not found"
            exit 1
          fi

          echo "name=$(echo "$DEVICE_INFO" | jq -r .name)" >> $GITHUB_OUTPUT
          echo "last_seen=$(echo "$DEVICE_INFO" | jq -r .lastSeen)" >> $GITHUB_OUTPUT
          echo "device_id=$(echo "$DEVICE_INFO" | jq -r .id)" >> $GITHUB_OUTPUT
          echo "has_ci_tag=$(echo "$DEVICE_INFO" | jq -r '.tags | contains(["tag:ci"])')" >> $GITHUB_OUTPUT

      - name: Check Device Online Status
        id: device-status
        run: |
          LAST_SEEN_TS=$(date -d "${{ steps.device-info.outputs.last_seen }}" +%s)
          CURRENT_TS=$(date +%s)
          DIFF=$((CURRENT_TS - LAST_SEEN_TS))
          
          if [ $DIFF -le 300 ]; then
            echo "online=true" >> $GITHUB_OUTPUT
          else
            echo "online=false" >> $GITHUB_OUTPUT
            echo "Skipping deployment: Target device was last seen $DIFF seconds ago (at: ${{ steps.device-info.outputs.last_seen }})"
          fi

      - name: Add CI Tag
        if: steps.device-status.outputs.online == 'true' && steps.device-info.outputs.has_ci_tag == 'false'
        env:
          DEVICE_ID: ${{ steps.device-info.outputs.device_id }}
        run: |
          TOKEN_RESPONSE=$(curl -s -d "client_id=${{ secrets.TAILSCALE_OAUTH_CLIENT_ID }}" \
                             -d "client_secret=${{ secrets.TAILSCALE_OAUTH_CLIENT_SECRET }}" \
                             "$TAILSCALE_API_URL/oauth/token")
          
          if ! echo "$TOKEN_RESPONSE" | jq empty; then
            echo "Invalid JSON response from token endpoint"
            echo "Response: $TOKEN_RESPONSE"
            exit 1
          fi

          ACCESS_TOKEN=$(echo "$TOKEN_RESPONSE" | jq -r .access_token)

          if [ -z "$ACCESS_TOKEN" ]; then
            echo "Failed to obtain access token"
            echo "Response: $TOKEN_RESPONSE"
            exit 1
          fi

          UPDATE_RESPONSE=$(curl -s -f -X POST \
            -H "Authorization: Bearer ${ACCESS_TOKEN}" \
            -H "Content-Type: application/json" \
            -d '["tag:ci"]' \
            "$TAILSCALE_API_URL/device/${DEVICE_ID}/tags")
          
          if [ $? -ne 0 ]; then
            echo "Failed to update device tags"
            echo "Response: $UPDATE_RESPONSE"
            exit 1
          fi

      - name: Deploy NixOS Configuration
        if: steps.device-status.outputs.online == 'true'
        env:
          TARGET_HOST: ${{ steps.device-info.outputs.name }}
        run: |
          nix run nixpkgs#nixos-rebuild -- switch \
            --flake .#ethernix \
            --target-host "$TARGET_HOST" \
            --use-remote-sudo \
            --impure \
            --option extra-platforms aarch64-linux \
            --option system-features kvm \
            --show-trace

      - name: Cleanup CI Tag
        if: always()
        env:
          DEVICE_ID: ${{ steps.device-info.outputs.device_id }}
        run: |
          ACCESS_TOKEN=$(curl -d "client_id=${{ secrets.TAILSCALE_OAUTH_CLIENT_ID }}" \
                             -d "client_secret=${{ secrets.TAILSCALE_OAUTH_CLIENT_SECRET }}" \
                             "$TAILSCALE_API_URL/oauth/token" | jq -r .access_token)

          curl -X POST \
            -H "Authorization: Bearer ${ACCESS_TOKEN}" \
            -H "Content-Type: application/json" \
            -d '[]' \
            "$TAILSCALE_API_URL/device/${DEVICE_ID}/tags"

      - name: Cleanup SSH Access
        if: always()
        run: |
          TOKEN_RESPONSE=$(curl -s -d "client_id=${{ secrets.TAILSCALE_OAUTH_CLIENT_ID }}" \
                             -d "client_secret=${{ secrets.TAILSCALE_OAUTH_CLIENT_SECRET }}" \
                             "$TAILSCALE_API_URL/oauth/token")
          
          if ! echo "$TOKEN_RESPONSE" | jq empty; then
            echo "Invalid JSON response from token endpoint"
            echo "Response: $TOKEN_RESPONSE"
            exit 1
          fi

          ACCESS_TOKEN=$(echo "$TOKEN_RESPONSE" | jq -r .access_token)

          if [ -z "$ACCESS_TOKEN" ]; then
            echo "Failed to obtain access token"
            echo "Response: $TOKEN_RESPONSE"
            exit 1
          fi

          # Get current ACL and strip comments before processing
          ACL_RESPONSE=$(curl -s -f -H "Authorization: Bearer ${ACCESS_TOKEN}" \
            "$TAILSCALE_API_URL/tailnet/-/acl" | \
            sed -e 's|//.*$||g' -e '/^\s*$/d' | \
            tr -d '\n' | \
            sed -e 's/,\s*}/}/g' -e 's/,\s*\]/]/g')
          
          if [ $? -ne 0 ]; then
            echo "Failed to fetch ACL"
            echo "Response: $ACL_RESPONSE"
            exit 1
          fi

          if ! echo "$ACL_RESPONSE" | jq empty; then
            echo "Invalid JSON received from ACL endpoint"
            echo "Response: $ACL_RESPONSE"
            exit 1
          fi

          NEW_ACL=$(echo "$ACL_RESPONSE" | jq -c 'del(.ssh[] | select(.src == ["tag:ci"] and .dst == ["tag:ci"]))' || exit 1)

          if [ -z "$NEW_ACL" ]; then
            echo "Failed to create new ACL"
            exit 1
          fi

          UPDATE_RESPONSE=$(curl -s -f -X POST \
            -H "Authorization: Bearer ${ACCESS_TOKEN}" \
            -H "Content-Type: application/json" \
            -d "$NEW_ACL" \
            "$TAILSCALE_API_URL/tailnet/-/acl")
          
          if [ $? -ne 0 ]; then
            echo "Failed to update ACL"
            echo "Response: $UPDATE_RESPONSE"
            exit 1
          fi